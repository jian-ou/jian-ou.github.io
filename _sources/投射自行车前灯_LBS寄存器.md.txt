# 投射自行车前灯_LBS寄存器

---

## 1. 寄存器地址

| 寄存器地址 | 寄存器名称 | 寄存器功能 |
|-|-|-|
| 0x00 | 控制输出寄存器 | 控制输出状态 |
| 0x01 | 显示模式寄存器 | 设置显示模式 |
| 0x02 | 扫描方向寄存器 | 设置扫描方向 |
| 0x03 | 扫描频率寄存器 | 设置扫描频率 |
| 0x04 | 重绘寄存器 | 重绘 |
| 0x10 | 输出亮度寄存器 | 设置输出的光功率 |
| 0x20 | offsetX寄存器 | 设置显示输出偏移的X坐标 |
| 0x21 | offsetY寄存器 | 设置显示输出偏移的Y坐标 |
| 0x22 | offsetW寄存器 | 设置显示输出偏移的W宽度 |
| 0x23 | offsetH寄存器 | 设置显示输出偏移的H高度 |
| 0x60 | TempPosX寄存器 | 设置显示局部刷新的X坐标 |
| 0x61 | TempPosY寄存器 | 设置显示局部刷新的Y坐标 |
| 0x62 | TempPosW寄存器 | 设置显示局部刷新的W宽度 |
| 0x63 | TempPosH寄存器 | 设置显示局部刷新的H高度 |
| 0x70 | 局部刷新显存寄存器 | 局部刷新显存数据 |
| 0x80 | 显存寄存器 | 显存数据 |

## 2. 寄存器功能

...待续

## 相关伪代码

```c
// 写寄存器函数
void write_register(uint8_t reg_addr, uint8_t data)
{
    spi_write(1, reg_addr);  // 写寄存器地址，is_command = 1
    spi_write(0, data);      // 写寄存器数据，is_command = 0
}

// 控制输出寄存器
void set_control_output(uint8_t control_bits)
{
    write_register(0x00, control_bits);
}

// 显示模式寄存器
void set_display_mode(uint8_t mode)
{
    write_register(0x01, mode);
}

// 扫描方向寄存器
void set_scan_direction(uint8_t direction)
{
    write_register(0x02, direction);
}

// 扫描频率寄存器
void set_scan_frequency(uint8_t frequency)
{
    write_register(0x03, frequency);
}

// 重绘寄存器
void trigger_redraw(void)
{
    write_register(0x04, 0x01);  // 写任意值触发重绘
}

// 输出亮度寄存器
void set_output_brightness(uint8_t brightness)
{
    write_register(0x10, brightness);
}

// 显示偏移寄存器
void set_offset(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    write_register(0x20, x);
    write_register(0x21, y);
    write_register(0x22, w);
    write_register(0x23, h);
}

// 临时局部刷新窗口寄存器
void set_temp_refresh_window(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    write_register(0x60, x);
    write_register(0x61, y);
    write_register(0x62, w);
    write_register(0x63, h);
}

// 写局部刷新显存数据
void write_temp_display_data(uint8_t* data, uint16_t length)
{
    spi_write(1, 0x70);  // 设置写入局部刷新区域
    for (uint16_t i = 0; i < length; i++)
    {
        spi_write(0, data[i]);
    }
}

// 写全局显存数据
void write_display_memory(uint8_t* data, uint32_t length)
{
    spi_write(1, 0x80);  // 设置写入显存区域
    for (uint32_t i = 0; i < length; i++)
    {
        spi_write(0, data[i]);
    }
}
```
